{"ast":null,"code":"var _jsxFileName = \"/home/dannyp/Documents/Projects/Professional/enigma/src/App.tsx\";\nimport React, { useReducer } from \"react\";\nimport \"./App.css\";\nimport { rotors, reflector } from \"./config\";\nimport { Rotor } from \"./components/rotor\";\nimport { PlainRow } from \"./components/row\";\n\nfunction App() {\n  const reducer = (state, action) => {\n    const rotate = (string, index) => string.length == 26 && string.substring(index % 26) + string.substring(0, index % 26);\n\n    console.log(rotate);\n\n    switch (action.type) {\n      case \"rotateRotor\":\n        console.log(state.machine.rotors);\n        return { ...state,\n          machine: { ...state.machine,\n            rotors: state.machine.rotors.map( //Iterate through rotors, shift the input and output rotor of rotor with specified index\n            (oldValue, index) => index == action.payload.rotorIndex ? {\n              inputRow: rotate(oldValue.inputRow, action.payload.shift),\n              outputRow: rotate(oldValue.outputRow, action.payload.shift)\n            } : oldValue)\n          }\n        };\n    }\n  };\n\n  const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const initialState = {\n    machine: {\n      rotors: rotors.map(rotorString => {\n        return {\n          inputRow: rotorString,\n          outputRow: alphabet,\n          shift: 0\n        };\n      }),\n      reflector: reflector\n    },\n    input: \"I am an input\"\n  };\n  const highlights = {\n    input: {\n      forwardPassLightUp: [0],\n      backwardPassLightUp: [1]\n    },\n    output: {\n      forwardPassLightUp: [2],\n      backwardPassLightUp: [3]\n    }\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  console.log(state.machine);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => dispatch({\n      type: \"rotateRotor\",\n      payload: {\n        rotorIndex: 0,\n        shift: 1\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \"Shift\"), \";\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"well\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 8\n    }\n  }, \"Enigma Simulator\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"well\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, \"Input\")), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control bg-success\",\n    id: \"in\",\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"table\", {\n    style: {\n      borderLeft: \"2px solid white !important\",\n      borderRight: \"2px solid white !important\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(PlainRow, {\n    className: \"well\",\n    row: alphabet // highlights={highlights}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Rotor, {\n    rotor: state.machine.rotors[0],\n    className: `alert-danger`,\n    highlights: highlights,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Rotor, {\n    rotor: state.machine.rotors[1],\n    className: `alert-warning`,\n    highlights: highlights,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Rotor, {\n    rotor: state.machine.rotors[2],\n    className: `alert-success`,\n    highlights: highlights,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(PlainRow, {\n    className: \"well\",\n    row: reflector // highlights={highlights}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/dannyp/Documents/Projects/Professional/enigma/src/App.tsx"],"names":["React","useReducer","rotors","reflector","Rotor","PlainRow","App","reducer","state","action","rotate","string","index","length","substring","console","log","type","machine","map","oldValue","payload","rotorIndex","inputRow","shift","outputRow","alphabet","initialState","rotorString","input","highlights","forwardPassLightUp","backwardPassLightUp","output","dispatch","borderLeft","borderRight"],"mappings":"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","sourcesContent":["import React, { useReducer, useState } from \"react\";\nimport \"./App.css\";\nimport { encryptString } from \"./machineLogic\";\nimport { rotors, reflector } from \"./config\";\nimport { Rotor } from \"./components/rotor\";\nimport { PlainRow } from \"./components/row\";\nfunction App() {\n  const reducer = (state: any, action: any) => {\n    const rotate = (string: string, index: number) =>\n      string.length == 26 &&\n      string.substring(index % 26) + string.substring(0, index % 26);\n    console.log(rotate);\n    switch (action.type) {\n      case \"rotateRotor\":\n        console.log(state.machine.rotors);\n        return {\n          ...state,\n          machine: {\n            ...state.machine,\n            rotors: state.machine.rotors.map(\n              //Iterate through rotors, shift the input and output rotor of rotor with specified index\n              (oldValue: any, index: number) =>\n                index == action.payload.rotorIndex\n                  ? {\n                      inputRow: rotate(\n                        oldValue.inputRow,\n                        action.payload.shift\n                      ),\n                      outputRow: rotate(\n                        oldValue.outputRow,\n                        action.payload.shift\n                      ),\n                    }\n                  : oldValue\n            ),\n          },\n        };\n    }\n  };\n\n  const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n  const initialState = {\n    machine: {\n      rotors: rotors.map((rotorString: string) => {\n        return { inputRow: rotorString, outputRow: alphabet, shift: 0 };\n      }),\n      reflector: reflector,\n    },\n    input: \"I am an input\",\n  };\n\n  const highlights: any = {\n    input: { forwardPassLightUp: [0], backwardPassLightUp: [1] },\n    output: { forwardPassLightUp: [2], backwardPassLightUp: [3] },\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  console.log(state.machine);\n  return (\n    <div className=\"App\">\n      <button\n        onClick={() =>\n          dispatch({\n            type: \"rotateRotor\",\n            payload: { rotorIndex: 0, shift: 1 },\n          })\n        }\n      >\n        Shift\n      </button>\n      ;<div className=\"well\">Enigma Simulator</div>\n\n      <div className=\"well\">\n        <div className=\"form-group\">\n          <label>\n            <h2>Input</h2>\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control bg-success\"\n            id=\"in\"\n            value=\"\"\n          ></input>\n        </div>\n        <table\n          style={{\n            borderLeft: \"2px solid white !important\",\n            borderRight: \"2px solid white !important\",\n          }}\n        >\n          <tbody>\n            <PlainRow\n              className=\"well\"\n              row={alphabet}\n              // highlights={highlights}\n            ></PlainRow>\n            <Rotor\n              rotor={state.machine.rotors[0]}\n              className={`alert-danger`}\n              highlights={highlights}\n            ></Rotor>\n            <Rotor\n              rotor={state.machine.rotors[1]}\n              className={`alert-warning`}\n              highlights={highlights}\n            ></Rotor>\n            <Rotor\n              rotor={state.machine.rotors[2]}\n              className={`alert-success`}\n              highlights={highlights}\n            ></Rotor>\n            <PlainRow\n              className=\"well\"\n              row={reflector}\n              // highlights={highlights}\n            ></PlainRow>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}