{"ast":null,"code":"var _jsxFileName = \"/home/dannyp/Documents/Projects/Professional/enigma/src/components/rotor.tsx\";\nimport React, { Fragment } from \"react\";\nexport const Rotor = ({\n  rotor,\n  className,\n  highlights\n}) => {\n  const characterToElement = (borderClass, highlights) => (char, index) => {\n    const highlightClasses = Object.keys(highlights).filter(key => highlights[key].includes(index)); //Class that adds a border once every two rotors, gives the impression everything is moving\n\n    const bordered = (index + rotor.shift) % 2 === 0 && borderClass;\n    console.log(index, rotor.shift);\n    return /*#__PURE__*/React.createElement(\"td\", {\n      className: `td ${className} ${highlightClasses.join(' ')} ${bordered}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, char);\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, rotor.inputRow.split(\"\").map(characterToElement(\"borderRight\", highlights.input))), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, rotor.outputRow.split(\"\").map(characterToElement(\"borderLeft\", highlights.output))));\n};","map":{"version":3,"sources":["/home/dannyp/Documents/Projects/Professional/enigma/src/components/rotor.tsx"],"names":["React","Fragment","Rotor","rotor","className","highlights","characterToElement","borderClass","char","index","highlightClasses","Object","keys","filter","key","includes","bordered","shift","console","log","join","inputRow","split","map","input","outputRow","output"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAMA,OAAO,MAAMC,KAAuB,GAAG,CAAC;AACtCC,EAAAA,KADsC;AAEtCC,EAAAA,SAFsC;AAGtCC,EAAAA;AAHsC,CAAD,KAIjC;AACJ,QAAMC,kBAAkB,GAAG,CACzBC,WADyB,EAEzBF,UAFyB,KAGtB,CAACG,IAAD,EAAeC,KAAf,KAAiC;AACpC,UAAMC,gBAAgB,GAACC,MAAM,CAACC,IAAP,CAAYP,UAAZ,EAAwBQ,MAAxB,CAAgCC,GAAD,IAAOT,UAAU,CAACS,GAAD,CAAV,CAAgBC,QAAhB,CAAyBN,KAAzB,CAAtC,CAAvB,CADoC,CAEpC;;AACA,UAAMO,QAAQ,GAAG,CAACP,KAAK,GAAGN,KAAK,CAACc,KAAf,IAAwB,CAAxB,KAA8B,CAA9B,IAAmCV,WAApD;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ,EAAmBN,KAAK,CAACc,KAAzB;AACA,wBACE;AAAI,MAAA,SAAS,EAAG,MAAKb,SAAU,IAAGM,gBAAgB,CAACU,IAAjB,CAAsB,GAAtB,CAA2B,IAAGJ,QAAS,EAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6ER,IAA7E,CADF;AAGD,GAXD;;AAYA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,KAAK,CAACkB,QAAN,CACEC,KADF,CACQ,EADR,EAEEC,GAFF,CAGGjB,kBAAkB,CAChB,aADgB,EAEhBD,UAAU,CAACmB,KAFK,CAHrB,CADH,CADF,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGrB,KAAK,CAACsB,SAAN,CACEH,KADF,CACQ,EADR,EAEEC,GAFF,CAGGjB,kBAAkB,CAChB,YADgB,EAEhBD,UAAU,CAACqB,MAFK,CAHrB,CADH,CAXF,CADF;AAwBD,CAzCM","sourcesContent":["import React, { Fragment } from \"react\";\ninterface IProps {\n  rotor: any;\n  className: String;\n  highlights: any;\n}\nexport const Rotor: React.FC<IProps> = ({\n  rotor,\n  className,\n  highlights\n}) => {\n  const characterToElement = (\n    borderClass: string,\n    highlights: any,\n  ) => (char: string, index: number) => {\n    const highlightClasses=Object.keys(highlights).filter((key)=>highlights[key].includes(index));\n    //Class that adds a border once every two rotors, gives the impression everything is moving\n    const bordered = (index + rotor.shift) % 2 === 0 && borderClass;\n    console.log(index, rotor.shift);\n    return (\n      <td className={`td ${className} ${highlightClasses.join(' ')} ${bordered}`}>{char}</td>\n    );\n  };\n  return (\n    <Fragment>\n      <tr>\n        {rotor.inputRow\n          .split(\"\")\n          .map(\n            characterToElement(\n              \"borderRight\",\n              highlights.input\n            )\n          )}\n      </tr>\n      <tr>\n        {rotor.outputRow\n          .split(\"\")\n          .map(\n            characterToElement(\n              \"borderLeft\",\n              highlights.output\n            )\n          )}\n      </tr>\n    </Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}