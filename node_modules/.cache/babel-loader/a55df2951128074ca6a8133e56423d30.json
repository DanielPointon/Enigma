{"ast":null,"code":"export const reducer = (state, action) => {\n  const rotate = (string, index) => string.length == 26 && string.substring(index % 26) + string.substring(0, index % 26);\n\n  console.log(rotate);\n\n  switch (action.type) {\n    case \"rotateRotor\":\n      console.log(state.machine.rotors);\n      return { ...state,\n        machine: { ...state.machine,\n          rotors: state.machine.rotors.map( //Iterate through rotors, shift the input and output rotor of rotor with specified index\n          (oldValue, index) => index == action.payload.rotorIndex ? {\n            inputRow: rotate(oldValue.inputRow, action.payload.shift),\n            outputRow: rotate(oldValue.outputRow, action.payload.shift),\n            shift: oldValue.shift + action.payload.shift\n          } : oldValue)\n        }\n      };\n  }\n};","map":{"version":3,"sources":["/home/dannyp/Documents/Projects/Professional/enigma/src/reducers/main.tsx"],"names":["reducer","state","action","rotate","string","index","length","substring","console","log","type","machine","rotors","map","oldValue","payload","rotorIndex","inputRow","shift","outputRow"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG,CAACC,KAAD,EAAaC,MAAb,KAA6B;AAClD,QAAMC,MAAM,GAAG,CAACC,MAAD,EAAiBC,KAAjB,KACbD,MAAM,CAACE,MAAP,IAAiB,EAAjB,IACAF,MAAM,CAACG,SAAP,CAAiBF,KAAK,GAAG,EAAzB,IAA+BD,MAAM,CAACG,SAAP,CAAiB,CAAjB,EAAoBF,KAAK,GAAG,EAA5B,CAFjC;;AAGAG,EAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;;AACA,UAAQD,MAAM,CAACQ,IAAf;AACE,SAAK,aAAL;AACEF,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACU,OAAN,CAAcC,MAA1B;AACA,aAAO,EACL,GAAGX,KADE;AAELU,QAAAA,OAAO,EAAE,EACP,GAAGV,KAAK,CAACU,OADF;AAEPC,UAAAA,MAAM,EAAEX,KAAK,CAACU,OAAN,CAAcC,MAAd,CAAqBC,GAArB,EACN;AACA,WAACC,QAAD,EAAgBT,KAAhB,KACEA,KAAK,IAAIH,MAAM,CAACa,OAAP,CAAeC,UAAxB,GACI;AACEC,YAAAA,QAAQ,EAAEd,MAAM,CAACW,QAAQ,CAACG,QAAV,EAAoBf,MAAM,CAACa,OAAP,CAAeG,KAAnC,CADlB;AAEEC,YAAAA,SAAS,EAAEhB,MAAM,CAACW,QAAQ,CAACK,SAAV,EAAqBjB,MAAM,CAACa,OAAP,CAAeG,KAApC,CAFnB;AAGEA,YAAAA,KAAK,EAAEJ,QAAQ,CAACI,KAAT,GAAehB,MAAM,CAACa,OAAP,CAAeG;AAHvC,WADJ,GAMIJ,QATA;AAFD;AAFJ,OAAP;AAHJ;AAqBD,CA1BM","sourcesContent":["export const reducer = (state: any, action: any) => {\n  const rotate = (string: string, index: number) =>\n    string.length == 26 &&\n    string.substring(index % 26) + string.substring(0, index % 26);\n  console.log(rotate);\n  switch (action.type) {\n    case \"rotateRotor\":\n      console.log(state.machine.rotors);\n      return {\n        ...state,\n        machine: {\n          ...state.machine,\n          rotors: state.machine.rotors.map(\n            //Iterate through rotors, shift the input and output rotor of rotor with specified index\n            (oldValue: any, index: number) =>\n              index == action.payload.rotorIndex\n                ? {\n                    inputRow: rotate(oldValue.inputRow, action.payload.shift),\n                    outputRow: rotate(oldValue.outputRow, action.payload.shift),\n                    shift: oldValue.shift+action.payload.shift\n                  }\n                : oldValue\n          ),\n        },\n      };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}